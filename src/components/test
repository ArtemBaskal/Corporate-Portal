import React from "react";
import { connect } from "react-redux";
import Card from "./Card";
import { handleDeleteFromSelected } from "../actions";
import { handlePinInSelected } from "../actions";
import { handleSelectFromCatalog } from "../actions";
import { test } from "../actions";
import "../styles/Card.css";

class MainPage extends React.Component {
  state = { items: Object.values(this.props.cards) };
  // state = {
  //   items: [
  //     "üç∞ Cake",
  //     "üç© Donut",
  //     "üçé Apple",
  //     "üçï Pizza",
  //     1,
  //     2,
  //     3,
  //     4,
  //     5,
  //     6,
  //     7,
  //     8,
  //     9
  //   ]
  // };

  // componentWillUpdate() {
  //   console.log("componentWillReceiveProps");
  //   // this.setState({ ...Object.values(this.props.cards).items });
  // }

  onDragStart = (e, idx) => {
    this.draggedItem = this.props.cards[idx];
    e.dataTransfer.effectAllowed = "grabbing";
    e.dataTransfer.setData("text/html", e.target.parentNode);
    e.dataTransfer.setDragImage(e.target.parentNode, 50, 50);
  };

  onDragOver = idx => {
    // const draggedOverItem = Object.values(this.props.cards)[idx];
    this.draggedOverItem = this.props.cards[idx];
    // if the item is dragged over itself, ignore
    // if (this.draggedItem === this.draggedOverItem) {
    //   return;
    // }

    // filter out the currently dragged item
    // let items = Object.values(this.props.cards).filter(
    //   item => item !== this.draggedItem
    // );
    // let items = this.props.cards;
    // console.log(this.draggedItem);
    // console.log(this.props.cards[idx]);
    // console.log(draggedOverItem);

    [this.draggedItem.order, this.draggedOverItem.order] = [
      this.draggedOverItem.order,
      this.draggedItem.order
    ];

    // delete this.props.cards[this.draggedItem.idx];

    // console.dir(this.props.cards[this.draggedItem.idx]);

    // add the dragged item after the dragged over item
    // items.splice(idx, 0, this.draggedItem);

    // this.setState({ items });
    //–¢–ï–°–¢! –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–ª—é—á–∏ –æ–±—ä–µ–∫—Ç–∞ - —á–∏—Å–ª–∞ –ø–æ –ø–æ—Ä—è–¥–∫—É
    // this.draggedItem = null;
  };

  onDragEnd = () => {
    this.props.test({ ...this.props.cards });
    // console.dir(e.target);
    this.draggedIdx = null;
  };

  // componentWillReceiveProps() {
  //   this.setState({
  //     ...Object.values(this.props.cards).items,
  //     [4]: { isSelected: false }
  //   });
  //   console.log(Object.values(this.props.cards));
  //   console.log(this.draggedItem);
  // }

  render() {
    return (
      <div className="card-container">
        {Object.values(this.props.cards)
          .sort((first, second) => first.order - second.order)
          .map(
            (card, idx) =>
              (card.isSelected ||
                (card.pinnedBy && Object.values(card.pinnedBy).length)) && (
                <Card
                  key={card.label}
                  label={card.label}
                  onDragOver={() => this.onDragOver(idx)}
                  onDragStart={e => this.onDragStart(e, idx)}
                  onDragEnd={this.onDragEnd}
                  isSelected={card.isSelected}
                  pinnedBy={card.pinnedBy}
                  order={card.order}
                  handleDelete={e => {
                    // console.log(card.label);
                    // e.stopPropagation();
                    // console.log("DELETED");
                    // this.setState({
                    //   ...Object.values(this.props.cards).items,
                    //   [card.label]: { isSelected: false }
                    // });
                    // console.log({
                    //   ...Object.values(this.props.cards).items,
                    //   [card.label]: { isSelected: false }
                    // });
                    // console.log(Object.values(this.props.cards));
                    return this.props.handleDeleteFromSelected(card.label);
                  }}

                  // handleSelect={() => {}}
                />
              )
            // <li key={card} onDragOver={() => this.onDragOver(idx)}>
            //   <div
            //     className="drag"
            //     draggable
            //     onDragStart={e => this.onDragStart(e, idx)}
            //     onDragEnd={this.onDragEnd}
            //   >
            //     {/* <Hamburger /> */}o
            //   </div>
            //   <span className="content">{card}</span>
            // </li>

            // (card.isSelected ||
            //   (card.pinnedBy && Object.values(card.pinnedBy).length)) && (
            //   <Card
            //     onDragOver={() => this.onDragOver(idx)}
            //     draggable
            //     onDragStart={e => this.onDragStart(e, idx)}
            //     onDragEnd={this.onDragEnd}
            //     label={card.label}
            //     key={card.label}
            //     isSelected={card.isSelected}
            //     pinnedBy={card.pinnedBy}
            //     handleDelete={e => {
            //       e.stopPropagation();
            //       console.log("DELETED");
            //       // return this.props.handleDeleteFromSelected(card.label);
            //     }}
            //     // handleSelect={() => {}}
            //   />
            // )
          )}
      </div>
    );
  }
}

const mapStateToProps = state => ({
  cards: state.item
});

export default connect(
  mapStateToProps,
  {
    handleDeleteFromSelected,
    handlePinInSelected,
    handleSelectFromCatalog,
    test
  }
)(MainPage);

// const reallyDelete = window.confirm(
//   `–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å ${card.label} –∏–∑ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π?`
// );

// if (accessRights !== "Admin_System" && card.pinnedBy && reallyDelete) {
//   alert(
//     `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è "${card.label}"`
//   );
//   //TODO: –µ—Å–ª–∏ –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å, —Ç–æ —Å—Ä–∞–∑—É –ø–∏—Å–∞—Ç—å –æ–± —ç—Ç–æ–º
// } else if (
//   (!card.pinnedBy && reallyDelete) ||
//   (card.pinnedBy && accessRights == "Admin_System")
// )

// handleSelectFromCatalog(card.label);
// handlePinInSelected(card.label);
// const reallyMakePinned =
//   accessRights === "Admin_System"
//     ? window.confirm(
//         `–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã —Å–¥–µ–ª–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ${card.label} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π?`
//       )
//     : false;
// if (reallyMakePinned) {
// }
